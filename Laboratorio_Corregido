class Node:
    def __init__(self, value):
        self.value = value
        self.left = None
        self.right = None
        self.height = 1


def getHeight(node):
    return node.height if node else 0


def getBalance(node):
    return getHeight(node.left) - getHeight(node.right) if node else 0


def updateHeight(node):
    if node:
        node.height = 1 + max(getHeight(node.left), getHeight(node.right))


def rotate_right(y):
    x = y.left
    T2 = x.right

    x.right = y
    y.left = T2

    updateHeight(y)
    updateHeight(x)

    return x


def rotate_left(x):
    y = x.right
    T2 = y.left

    y.left = x
    x.right = T2

    updateHeight(x)
    updateHeight(y)

    return y


class AVLTree:
    def __init__(self):
        self.root = None

    def insert(self, value):
        self.root = self._insert_recursive(self.root, value)

    def _insert_recursive(self, node, value):
        if not node:
            return Node(value)

        if value < node.value:
            node.left = self._insert_recursive(node.left, value)
        elif value > node.value:
            node.right = self._insert_recursive(node.right, value)
        else:
            return node # No duplicados

        updateHeight(node)
        balance = getBalance(node)

        # Casos de rotación
        if balance > 1 and value < node.left.value:
            return rotate_right(node)
        if balance < -1 and value > node.right.value:
            return rotate_left(node)
        if balance > 1 and value > node.left.value:
            node.left = rotate_left(node.left)
            return rotate_right(node)
        if balance < -1 and value < node.right.value:
            node.right = rotate_right(node.right)
            return rotate_left(node)

        return node

    def delete(self, value):
        self.root = self._delete_recursive(self.root, value)

    def _delete_recursive(self, node, value):
        if not node:
            return node

        if value < node.value:
            node.left = self._delete_recursive(node.left, value)
        elif value > node.value:
            node.right = self._delete_recursive(node.right, value)
        else:
            # Nodo con uno o cero hijos
            if not node.left:
                return node.right
            elif not node.right:
                return node.left

            # Nodo con dos hijos
            temp = self.getMinValueNode(node.right)
            node.value = temp.value
            node.right = self._delete_recursive(node.right, temp.value)

        updateHeight(node)
        balance = getBalance(node)

        # Rotaciones
        if balance > 1 and getBalance(node.left) >= 0:
            return rotate_right(node)
        if balance > 1 and getBalance(node.left) < 0:
            node.left = rotate_left(node.left)
            return rotate_right(node)
        if balance < -1 and getBalance(node.right) <= 0:
            return rotate_left(node)
        if balance < -1 and getBalance(node.right) > 0:
            node.right = rotate_right(node.right)
            return rotate_left(node)

        return node

    def getMinValueNode(self, node):
        while node.left:
            node = node.left
        return node

    def in_order_traversal(self):
        result = []
        self._in_order(self.root, result)
        return result

    def _in_order(self, node, result):
        if node:
            self._in_order(node.left, result)
            result.append(node.value)
            self._in_order(node.right, result)

    # Visualización del árbol
    def print_tree(self, node=None, indent="", last=True):
        if node is None and indent == "":
            node = self.root
        if node is None:
            return

        print(indent, "`- " if last else "|- ", node.value, f"(h={node.height}, b={getBalance(node)})", sep="")
        indent += " " if last else "| "
        self.print_tree(node.left, indent, False)
        self.print_tree(node.right, indent, True)


# Ejemplo de uso
if __name__ == "__main__":
    avl = AVLTree()
    values = [10, 20, 30, 40, 50, 25]
    for val in values:
        avl.insert(val)

    print("Recorrido In-Order:", avl.in_order_traversal())
    print("\nEstructura del Árbol AVL:")
    avl.print_tree()

    avl.delete(40)
    print("\nDespués de eliminar 40:")
    avl.print_tree()
